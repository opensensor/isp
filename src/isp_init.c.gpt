#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>

#define ISP_BASE_ADDR 0x13300000
#define ISP_OFFSET_PARAMS 0x137f0
#define NUM_ENTRIES 471

void *map_base;

// Function to safely write to a memory-mapped ISP register
void write_isp_register(uint32_t offset, uint32_t value) {
    volatile uint32_t *reg = (uint32_t *)((char *)map_base + offset);
    *reg = value;
}

// Function to initialize ISP parameters
void isp_init_params(uint32_t *params_array) {
    printf("Initializing ISP parameters...\n");
    for (int i = 0; i < NUM_ENTRIES; i++) {
        write_isp_register(ISP_OFFSET_PARAMS + i * 4, params_array[i]);
    }
}

int main() {
    int mem_fd = open("/dev/mem", O_RDWR | O_SYNC);
    if (mem_fd < 0) {
        perror("Failed to open /dev/mem");
        return 1;
    }

    // Map the ISP memory region
    map_base = mmap(NULL, 0x100000, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, ISP_BASE_ADDR);
    if (map_base == MAP_FAILED) {
        perror("Failed to mmap");
        close(mem_fd);
        return 1;
    }

    printf("Memory mapped successfully\n");

    // Allocate and initialize parameters
    static uint32_t tparams_day[NUM_ENTRIES] = {0};
    for (int i = 0; i < NUM_ENTRIES; i++) {
        tparams_day[i] = i * 3;
    }

    // Initialize the parameters
    isp_init_params(tparams_day);

    // Clean up
    munmap(map_base, 0x100000);
    close(mem_fd);

    printf("ISP initialization completed.\n");
    return 0;
}

