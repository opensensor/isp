# Cline Rules for TX ISP Driver Hardware Initialization & VIC Debug

## CRITICAL: Hardware Initialization Sequence is Everything
- **Correct initialization order determines success** - wrong sequence = no frames
- The hardware must be initialized in the EXACT order the reference driver uses
- VIC interrupts won't work without proper hardware setup sequence
- Both initialization AND interrupt handling must be correct

## Hardware Initialization Sequence Focus
1. **Clock and Power Domain Setup** (must happen first)
  - ISP clocks must be enabled before register access
  - CGU_ISP clock configuration
  - Power domains in correct state

2. **CSI PHY Initialization** (before sensor streaming)
  - MIPI PHY power-up sequence
  - Lane configuration (2-lane for GC2053)
  - Timing parameters matching sensor output

3. **VIC Hardware Setup** (before enabling interrupts)
  - Buffer descriptors allocated and linked
  - DMA configuration
  - Dimension and stride registers
  - Control registers in correct state

4. **Interrupt Setup** (only after hardware ready)
  - Enable masks configured
  - Handlers registered
  - Hardware interrupt generation enabled

## Binary Ninja MCP - ALLOWED OPERATIONS ONLY
**You may ONLY use these two MCP operations:**
1. **search** - Find methods, data structures, or constants in reference driver
2. **decompile** - Get decompiled code for specific methods

**FORBIDDEN MCP operations:**
- Do NOT attempt any other Binary Ninja operations
- Do NOT try to read memory, set breakpoints, or use debugging features
- Do NOT attempt assembly-level operations

## Priority Investigation Areas
1. **Initialization Sequence**:
  ```bash
  mcp search "probe"
  mcp search "init" 
  mcp decompile tx_isp_probe
  mcp decompile tx_isp_init_subdev

VIC Hardware Setup:
bashmcp search "vic_init"
mcp search "vic_start"
mcp decompile tx_isp_vic_start

Interrupt Configuration:
bashmcp search "request_irq"
mcp decompile isp_vic_interrupt_service_routine


Debug-First Approach

Verify initialization order matches reference:

Check probe/init sequences in our driver vs reference
Ensure clocks enabled before register access
Confirm CSI PHY setup before sensor start


Trace register writes during init:

Compare our register write sequence to reference driver
Look for missing initialization steps
Verify timing between operations


Only use MCP after initial investigation:

First check our logs and traces
Use MCP to verify specific initialization sequences
Don't jump to MCP immediately



Key Hardware Blocks & Dependencies
c// Initialization Order (MUST match reference):
1. Core ISP init (memory mapping, clocks)
2. CSI subsystem init (PHY, lanes)  
3. VIC subsystem init (buffers, DMA)
4. Sensor detection & config
5. Interrupt setup
6. Start streaming (CSI → VIC → sensor)

// Critical Register Groups:
CSI_PHY_BASE + 0x000-0x1FF  // PHY config (before sensor)
VIC_BASE + 0x300-0x330       // VIC control (after CSI)
ISP_BASE + 0x9800-0x98FF     // ISP control (first)
VIC Specific Issues

"Control limit error" suggests:

Buffer descriptors not properly initialized
DMA configuration mismatch
Timing violation in data pipeline


Check these in order:

VIC buffer allocation (8 descriptors)
DMA enable sequence
Interrupt threshold configuration
Data format consistency (RAW10)



Method Implementation Rules

Match reference initialization sequence exactly
Replace hard-coded offsets with struct members
Add logging at each initialization stage
Preserve timing/delays from reference

When Stuck

First: Compare init sequence with reference driver logs
Second: Check if hardware blocks initialized in wrong order
Third: Verify all register writes match reference
Then: Use MCP search/decompile for specific init methods
Finally: Add detailed logging at each init stage

MCP Usage Examples
bash# ALLOWED (search and decompile only):
mcp search "tx_isp_probe"
mcp decompile tx_isp_probe
mcp search "vic_init"
mcp decompile tx_isp_vic_init

# FORBIDDEN (anything else):
mcp read_memory 0x10023318  # NOT ALLOWED
mcp set_breakpoint xxx       # NOT ALLOWED
mcp disassemble xxx          # NOT ALLOWED
Success Criteria

Hardware initialization completes without errors
Register init sequence matches reference driver
VIC interrupts fire without "control limit error"
/proc/interrupts shows increasing IRQ 37 count
Frames flow through pipeline

Remember

Initialization sequence is as important as interrupt handling
Hardware blocks have dependencies - wrong order = failure
Use MCP sparingly and only search and decompile
Compare against reference driver's init sequence first
One wrong init step can break everything downstream